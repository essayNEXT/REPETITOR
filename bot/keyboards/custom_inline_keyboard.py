from .inline_keyboard import KeyboardOfDict, ContextInlineKeyboardGenerator
from .keyboard_translate.kb_translate import translate_context
from aiogram.types import CallbackQuery


class MyCustomKeyboard(ContextInlineKeyboardGenerator):
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ AbstractInlineKeyboard."""

    @property
    def initial_text(self) -> str:
        initial_text = "Hello, it is your test keyboard ‚Ññ 1"
        return initial_text

    @property
    def kb_language(self) -> str:
        kb_language = "en"
        return kb_language

    @property
    def callback_pattern(self) -> str:
        callback_pattern = "#_test_"
        return callback_pattern

    @property
    def max_rows_number(self) -> int:
        return 5

    @property
    def translate_function(self):
        return translate_context

    @property
    def top_buttons(self) -> KeyboardOfDict:
        top_buttons = [
            [
                {
                    "callback_data": "#_test_button_1",
                    "text": "Button 1",
                    "message": "You pressed top button 1",
                },
                {
                    "callback_data": "#_test_button_2",
                    "text": "Button 2",
                    "message": "You pressed top button 2",
                },
            ],
            [
                {
                    "callback_data": "#_test_button_3",
                    "text": "Button 3",
                    "message": "You pressed top button 3",
                }
            ],
        ]
        return top_buttons

    @property
    def scroll_buttons(self) -> KeyboardOfDict:
        scroll_buttons = [
            [
                {
                    "callback_data": f"#_test_button_scroll_{num}",
                    "text": f"Scroll button {num}",
                    "message": f"You pressed scroll button {num}",
                }
            ]
            for num in range(1, 20)
        ]
        return scroll_buttons

    @property
    def bottom_buttons(self) -> KeyboardOfDict:
        bottom_buttons = [
            [
                {
                    "callback_data": "#_test_button_4",
                    "text": "Button 4",
                    "message": "You pressed bottom button 4",
                }
            ]
        ]
        return bottom_buttons

    def callback(self, event: CallbackQuery) -> None:
        """
        –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–ª–±–µ–∫—ñ–≤. –ó–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤ –ø–æ—Ö—ñ–¥–Ω–æ–º—É –∫–ª–∞—Å—ñ.
        –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω—é—î –ø–∞—Ä–∞–º–µ—Ç—Ä self.text –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏.
        """
        self.text = self.messages[event.data]


class MyCustomKeyboard2(ContextInlineKeyboardGenerator):
    """–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ AbstractInlineKeyboard."""

    @property
    def initial_text(self) -> str:
        initial_text = "–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–µ—Å—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ üôÉÔ∏è"
        return initial_text

    @property
    def kb_language(self) -> str:
        kb_language = "uk"
        return kb_language

    @property
    def callback_pattern(self) -> str:
        callback_pattern = "#_test2_"
        return callback_pattern

    @property
    def max_rows_number(self) -> int:
        return 2

    @property
    def translate_function(self):
        return translate_context

    @property
    def top_buttons(self) -> KeyboardOfDict | None:
        top_buttons = None
        return top_buttons

    @property
    def scroll_buttons(self) -> KeyboardOfDict:
        scroll_buttons = [
            [
                {
                    "callback_data": f"#_test2_button_scroll_{num}",
                    "text": f"–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è {num}",
                    "message": f"–¢–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è {num}",
                }
            ]
            for num in range(1, 7)
        ]
        return scroll_buttons

    @property
    def bottom_buttons(self) -> KeyboardOfDict:
        bottom_buttons = [
            [
                {
                    "callback_data": "#_test2_button_done",
                    "text": "DONE",
                    "message": "–¢–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤, —â–æ –º–∞–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                }
            ]
        ]
        return bottom_buttons

    def callback(self, event: CallbackQuery) -> None:
        """
        –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–ª–±–µ–∫—ñ–≤. –ó–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –≤ –ø–æ—Ö—ñ–¥–Ω–æ–º—É –∫–ª–∞—Å—ñ.
        –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–º—ñ–Ω—é—î –ø–∞—Ä–∞–º–µ—Ç—Ä self.text –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏.
        """
        self.text = self.messages[event.data] + " üôÉÔ∏è"
